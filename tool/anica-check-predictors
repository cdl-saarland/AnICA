#!/usr/bin/env python3

""" A small script to test whether predictors can handle all instructions.
"""

import argparse
import random
import textwrap

import os
import sys

from progress.bar import Bar as ProgressBar

from iwho.utils import parse_args_with_logging

import_path = os.path.join(os.path.dirname(__file__), "..")
sys.path.append(import_path)

from anica.abstractioncontext import AbstractionContext
from anica.abstractblock import AbstractBlock, SamplingError
from iwho.configurable import load_json_config

import logging
logger = logging.getLogger(__name__)

def main():
    default_seed = 424242

    argparser = argparse.ArgumentParser(description=__doc__, formatter_class=argparse.ArgumentDefaultsHelpFormatter)

    argparser.add_argument('-c', '--config', default=None, metavar="CONFIG",
            help='abstraction context config file in json format')

    argparser.add_argument('-w', '--write-filter', action='store_true',
            help='if true, write a list of all unsupported instructions to the filter list location specified in the predictor registry (if there is one)')

    argparser.add_argument('-s', '--seed', type=int, default=default_seed, metavar="N",
            help='seed for the rng')

    argparser.add_argument('-b', '--batch-size', type=int, default=1, metavar="N",
            help='number of samples to take for each instruction scheme')

    argparser.add_argument('predictors', nargs='*', metavar="PREDICTOR_ID",
            help='ids of predictor(s) to test')

    args = parse_args_with_logging(argparser, "warning")

    random.seed(args.seed)

    if args.config is None:
        config = {}
    else:
        config = load_json_config(args.config)

    actx = AbstractionContext(config=config)

    batch_size = args.batch_size

    pred_keys = actx.predmanager.resolve_key_patterns(args.predictors)
    if len(pred_keys) == 0:
        # if none are given, take them all
        pred_keys = actx.predmanager.resolve_key_patterns(['.*'])

    actx.predmanager.get_sudo_if_necessary(pred_keys)

    num_schemes = len(actx.iwho_ctx.filtered_insn_schemes)
    for pred_key in pred_keys:
        error_schemes = []
        logger.info(f"checking predictor '{pred_key}'")
        with ProgressBar(f"checking predictor '{pred_key}'",
                suffix = '%(percent).1f%%',
                max=num_schemes) as pb:
            for ischeme in actx.iwho_ctx.filtered_insn_schemes:
                ab = AbstractBlock.make_top(actx, num_insns=1)
                ab.abs_insns[0].features['exact_scheme'].val = ischeme
                sampler = ab.precompute_sampler()
                sampled_bbs = []

                num_sampling_errors = 0
                for i in range(batch_size):
                    try:
                        sampled_bbs.append(sampler.sample())
                    except SamplingError as e:
                        num_sampling_errors += 1

                results = actx.predmanager.do(pred_key, sampled_bbs)

                num_prediction_errors = 0
                all_results = dict()
                had_error = False
                for bb, r in zip(sampled_bbs, results):
                    cycles = r.get('TP', None)
                    if cycles is None or cycles <= 0:
                        num_prediction_errors += 1
                        had_error = True
                        logger.info(f"error for '{str(bb).strip()}':\n{r}")
                    else:
                        all_results[cycles] = str(bb).strip()

                if had_error:
                    error_schemes.append(ischeme)

                logger.debug(f"sampling errors: {num_sampling_errors}")
                logger.debug(f"prediction errors: {num_prediction_errors} (in {len(sampled_bbs)} samples)")

                if len(all_results) > 1:
                    logger.info(f"got several different predictions with '{pred_key}':\n" +
                            textwrap.indent("\n".join(sorted(map(lambda x: f"{x[0]}: {x[1]}", all_results.items()))), '  '))
                pb.next()

        num_errors = len(error_schemes)
        print("Found {} schemes with error(s) (out of {}).".format(num_errors, num_schemes))
        if args.write_filter:
            filter_files = actx.predmanager.get_insn_filter_files([pred_key])
            if len(filter_files) == 1:
                filter_file = filter_files[0]
                with open(filter_file, 'w') as f:
                    for ischeme in error_schemes:
                        print(str(ischeme), file=f)
                logger.info(f"  filter file for '{pred_key}' written to '{filter_file}'")




if __name__ == "__main__":
    main()
