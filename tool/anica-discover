#!/usr/bin/env python3

"""AnICA: Analyzing Inconsistencies of Code Analyzers
"""

import argparse
import copy
from datetime import datetime
import itertools
import math
from pathlib import Path
import random
import os
import shutil
import sys

from iwho.configurable import load_json_config, store_json_config
from iwho.utils import init_logging, update_logfile

import_path = os.path.join(os.path.dirname(__file__), "..")
sys.path.append(import_path)

from anica.abstractioncontext import AbstractionContext
import anica.discovery as discovery


import logging
logger = logging.getLogger(__name__)


def main():
    HERE = Path(__file__).parent

    default_campaign_config = HERE.parent / "configs" / "campaigns" / "campconfig_01.json"
    default_seed = 424242


    argparser = argparse.ArgumentParser(description=__doc__, formatter_class=argparse.ArgumentDefaultsHelpFormatter)

    argparser.add_argument('-c', '--config', default=default_campaign_config, metavar="CONFIG",
            help='campaign configuration file in json format')

    argparser.add_argument('--loop', action='store_true', help='if set, loop through the campaign config indefinitely')

    argparser.add_argument('--check-config', action='store_true', help='if set, do not do any real discovery, only check that the configuration is plausible')

    argparser.add_argument('-s', '--seed', type=int, default=default_seed, metavar="N",
            help='seed for the rng')

    argparser.add_argument('outdir', metavar="OUTDIR",
            help='output directory for reports and results')

    args = argparser.parse_args()

    check_config = args.check_config

    random.seed(args.seed)

    campaign_config = load_json_config(args.config)

    outdir = Path(args.outdir).resolve()

    init_logging('info')

    if check_config:
        total_seconds = 0
        num_unpredictable = 0

    template_key = 'TEMPLATE:all_predictor_pairs'
    all_campaign_configs = []
    for c in campaign_config:
        template_preds = c.get(template_key, None)
        if template_preds is not None:
            assert 'predictors' not in c
            num_pairs = 0
            for pair_of_preds in itertools.combinations(template_preds, r=2):
                num_pairs += 1
                instance = copy.deepcopy(c)
                del instance[template_key]
                instance['predictors'] = list(pair_of_preds)
                all_campaign_configs.append(instance)
            print(f"config template expanded to {num_pairs} configs")
        else:
            all_campaign_configs.append(c)

    # to not require interactivity: query for the sudo password once, in the
    # beginning, if necessary
    for idx, config in enumerate(all_campaign_configs):
        actx_config = load_json_config(config['abstraction_config_path'])
        actx_config['measurement_db'] = None
        predictor_keys = config['predictors']
        actx = AbstractionContext(config=actx_config)
        actx.predmanager.set_predictors(predictor_keys) # this will query for the password if necessary
        del actx
        del actx_config
        del predictor_keys

    while True:
        for idx, config in enumerate(all_campaign_configs):
            # create a campaign directory
            timestamp = datetime.now().replace(microsecond=0).isoformat()
            curr_out_dir = outdir / f'campaign_{idx:03d}_{timestamp}'
            os.makedirs(curr_out_dir)

            update_logfile(logfile=curr_out_dir / 'log.txt')

            actx_config = load_json_config(config['abstraction_config_path'])
            termination_criterion = config['termination']
            predictor_keys = config['predictors']

            # set the db path
            actx_config['measurement_db'] = {"db_path": str(curr_out_dir / 'measurements.db')}

            restrict_to_supported_insns = config['restrict_to_supported_insns']

            if restrict_to_supported_insns:
                rest_keys = predictor_keys
            else:
                rest_keys = None

            actx = AbstractionContext(config=actx_config, restrict_to_insns_for=rest_keys)
            actx.predmanager.set_predictors(predictor_keys)

            filter_dir = curr_out_dir / 'filter_files'
            os.makedirs(filter_dir)

            # Get the used instruction filter files and copy them into the
            # result dir. Rewrite the filter file paths in the config object to
            # make the reported discoveries refer to the right files.
            filters = actx.iwho_cfg.filters
            rewritten_filters = []
            running_id = 0
            for f in filters:
                if f['kind'] in ["blacklist", "whitelist"]:
                    path = Path(f['file_path'])
                    if not path.exists():
                        rewritten_filters.append(f)
                        continue
                    running_id += 1
                    fname = path.name
                    if not fname.endswith('.csv'):
                        fname += '.csv'
                    rewritten_path = filter_dir / f'filter_{running_id:02d}_{fname}'
                    shutil.copy(src=path, dst=rewritten_path)
                    rewritten_filters.append({'kind': f['kind'], 'file_path': str(rewritten_path)})
                else:
                    rewritten_filters.append(f)

            # This will not affect the iwho context in the current actx since
            # we have already created it. It will however affect the config
            # that is dumped with discoveries and witnesses.
            actx.iwho_cfg.filters = rewritten_filters

            outdict = {**config, "abstraction_config": actx.get_config()}
            store_json_config(outdict, curr_out_dir / 'campaign_config.json')

            # initialize the measurement db
            with actx.measurement_db as mdb:
                mdb.create_tables()

            if check_config:
                termination = termination_criterion
                if any(map(lambda x: x in termination.keys(), ['days', 'hours', 'minutes', 'seconds'])):
                    max_seconds_passed = termination.get('days', 0) * 3600 * 24
                    max_seconds_passed += termination.get('hours', 0) * 3600
                    max_seconds_passed += termination.get('minutes', 0) * 60
                    max_seconds_passed += termination.get('seconds', 0)
                    total_seconds += max_seconds_passed
                else:
                    num_unpredictable += 1
                continue

            try:
                discoveries = discovery.discover(actx, termination=termination_criterion, out_dir=curr_out_dir)
            except discovery.DiscoveryError as e:
                logger.exception(e)
                logger.error("Discovery campaign ended prematurely.")


        if (not args.loop):
            break

    if check_config:
        days = total_seconds // (3600 * 24)
        total_seconds %= 3600 * 24
        hours = total_seconds // 3600
        total_seconds %= 3600
        minutes = total_seconds // 60
        total_seconds %= 60
        seconds = total_seconds
        print(f"estimated total time: {days} days, {hours} hours, {minutes} minutes, {seconds} seconds")
        print(f"    + the time required for {num_unpredictable} unpredictable campaigns")




if __name__ == "__main__":
    main()
