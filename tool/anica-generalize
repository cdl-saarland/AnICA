#!/usr/bin/env python3

"""AnICA: Analyzing Inconsistencies of Code Analyzers
"""

import argparse
from datetime import datetime
import json
import multiprocessing
from pathlib import Path
import random
import os
import shutil
import sys
import textwrap

from datetime import datetime

import iwho
from iwho.configurable import load_json_config
from iwho.predictors import Predictor
from iwho.utils import parse_args_with_logging, update_logfile


import_path = os.path.join(os.path.dirname(__file__), "..")
sys.path.append(import_path)

from anica.abstractioncontext import AbstractionContext
from anica.abstractblock import AbstractBlock
import anica.discovery as discovery


import logging
logger = logging.getLogger(__name__)

try:
    import readline
except ImportError:
    logger.warning('Readline is not available!')


commands = [
        (('expand', 'e', 'ex'), "apply an expansion"),
        (('finish',), "finish with random expansions"),
        (('exit', 'quit'), "end here"),
        # (('expansions', 'es'), "show the possible expansions"),
        # (('undo', 'u'), "undo the last expansion"),
        # (('store', 's'), "store the current trace to disk"),
        # (('load', 'l'), "apply the operations from a trace on disk"),
    ]

def command_index(key):
    for idx, (ks, ht) in enumerate(commands):
        if key in ks:
            return ks[0]
    return None

def print_help():
    print("Usage:")
    for ks, ht in commands:
        print("  {} :  {}".format(",".join(ks), ht))

def colorize(s, col):
    if col == 'green':
        return "\u001b[32m" + s + "\u001b[0m"
    elif col == 'blue':
        return "\u001b[34m" + s + "\u001b[0m"
    assert False

def print_expansions(expansions):
    for idx, (exp, benefit) in enumerate(expansions):
        print("  ({}): {} (benefit: {})".format(colorize(str(idx), 'blue'), exp, benefit))


finish_interactive = False

class EndInteractive(Exception):
    def __init__(self, message, ab):
        super().__init__(message)
        self.ab = ab

def interact(ab, expansions):
    # TODO this is hacked and should be improved!
    global finish_interactive
    if finish_interactive:
        return random.choice(expansions)

    while True:
        print(colorize("\nCurrent abstract block:", 'green'))
        print(textwrap.indent(str(ab), '  '))

        print(colorize("\nAvailable expansions:", 'green'))
        print_expansions(expansions)

        print(colorize("\nChoose an expansion:", 'green'))
        cmd = input("> ")

        tokens = cmd.split()

        if len(tokens) == 0:
            continue

        key = tokens[0]
        cmd_idx = command_index(key)
        if cmd_idx == 'expand':
            if len(tokens) != 2:
                print("invalid number of arguments for 'expand', expected 1")
                continue
            try:
                exp_idx = int(tokens[1])
            except ValueError:
                print("invalid argument for 'expand', expected a number")
                continue
            if exp_idx < 0 or exp_idx >= len(expansions):
                print("invalid argument for 'expand', expected the index of an expansion.")
                continue
            return expansions[exp_idx]
        elif cmd_idx == "finish":
            finish_interactive = True
            return random.choice(expansions)
        elif cmd_idx == "exit":
            raise EndInteractive("Terminated because of user command", ab=ab)
        # elif cmd_idx == 'expansions':
        #     print_expansions(expansions)
        # elif cmd_idx == 'undo':
        #     pass
        # elif cmd_idx == 'store':
        #     pass
        # elif cmd_idx == 'load':
        #     pass
        else:
            try:
                exp_idx = int(tokens[0])
            except ValueError:
                print_help()
                continue
            if exp_idx < 0 or exp_idx >= len(expansions):
                print("invalid expansion index: out of range")
                continue
            return expansions[exp_idx]



def main():
    HERE = Path(__file__).parent

    default_seed = 424242

    argparser = argparse.ArgumentParser(description=__doc__, formatter_class=argparse.ArgumentDefaultsHelpFormatter)

    argparser.add_argument('-c', '--config', metavar="CONFIG", default=None,
            help='abstraction context configuration file in json format')

    argparser.add_argument('-s', '--seed', type=int, default=default_seed, metavar="N",
            help='seed for the rng')

    argparser.add_argument('--no-minimize', action='store_true', help='do not minimize the basic block before generalization')

    argparser.add_argument('--no-restrict-to-supported', action='store_true', help='do not restrict the considered instructions to those supported by the predictors')

    argparser.add_argument('-i', '--interactive', action='store_true', help='interactively choose the expansion order')

    argparser.add_argument('-o', '--output', metavar="OUTDIR", default="results", help='output directory for reports and results')

    argparser.add_argument('generalize', metavar='asm file', help='path to a file containing the assembly of a basic block to generalize')

    argparser.add_argument('predictors', nargs="+", metavar="PREDICTOR_ID", help='one or more identifiers of predictors specified in the config')

    args = parse_args_with_logging(argparser, "info")

    random.seed(args.seed)

    predictor_keys = args.predictors

    restrict_to_supported_insns = not args.no_restrict_to_supported

    outdir = Path(args.output)

    timestamp = datetime.now().replace(microsecond=0).isoformat()
    gen_dir = outdir / f'generalization_{timestamp}'
    gen_dir.mkdir(parents=True)

    update_logfile(logfile=gen_dir / 'log.txt')

    actx_config = load_json_config(args.config)

    if restrict_to_supported_insns:
        rest_keys = predictor_keys
    else:
        rest_keys = None

    # set the db path
    actx_config['measurement_db'] = {"db_path": str(gen_dir / 'measurements.db')}

    actx = AbstractionContext(config=actx_config, restrict_to_insns_for=rest_keys)
    actx.predmanager.set_predictors(predictor_keys)

    infos = {}
    infos["predictors"] = actx.predmanager.resolve_key_patterns(predictor_keys)

    filter_dir = gen_dir / 'filter_files'
    filter_dir.mkdir(parents=True)

    # Get the used instruction filter files and copy them into the
    # result dir. Rewrite the filter file paths in the config object to
    # make the reported discoveries refer to the right files.
    filters = actx.iwho_cfg.filters
    rewritten_filters = []
    running_id = 0
    for f in filters:
        if f['kind'] in ["blacklist", "whitelist"]:
            path = Path(f['file_path'])
            if not path.exists():
                rewritten_filters.append(f)
                continue
            running_id += 1
            fname = path.name
            if not fname.endswith('.csv'):
                fname += '.csv'
            rewritten_path = filter_dir / f'filter_{running_id:02d}_{fname}'
            shutil.copy(src=path, dst=rewritten_path)
            rewritten_filters.append({'kind': f['kind'], 'file_path': str(rewritten_path)})
        else:
            rewritten_filters.append(f)

    # This will not affect the iwho context in the current actx since
    # we have already created it. It will however affect the config
    # that is dumped with discoveries and witnesses.
    actx.iwho_cfg.filters = rewritten_filters

    # initialize the measurement db
    with actx.measurement_db as mdb:
        mdb.create_tables()

    iwho_ctx = actx.iwho_ctx

    with open(args.generalize, 'r') as f:
        asm_str = f.read()
    bb = iwho.BasicBlock(iwho_ctx, iwho_ctx.parse_asm(asm_str))

    # write start bb
    with open(gen_dir / 'start_bb.s', 'w') as f:
        print(bb.get_asm(), file=f)

    if not args.no_minimize:
        min_bb = discovery.minimize(actx, bb)
        print("Pruned {} instructions in the minimization step:".format(len(bb) - len(min_bb)))
        print(textwrap.indent(min_bb.get_asm(), '  '))
        bb = min_bb

        # write minimized bb
        with open(gen_dir / 'minimized_bb.s', 'w') as f:
            print(bb.get_asm(), file=f)

    abb = AbstractBlock(actx, bb)
    if args.interactive:
        strategy = "interactive"
        interact_fun = interact
    else:
        strategy = actx.discovery_cfg.generalization_strategy[0][0]
        interact_fun = None

    try:
        remarks = []
        res_abb, trace, result_ref = discovery.generalize(actx, abb, strategy=strategy, remarks=remarks, interact=interact_fun)
        print("Generalization Result:\n" + textwrap.indent(str(res_abb), '  '))
        infos['witness_len'] = len(trace)
    except EndInteractive as e:
        print("generalization terminated early")
        res_abb = e.ab
        trace = None
        infos['witness_len'] = None

    if len(remarks) > 0:
        print("Remarks:")
        for r in remarks:
            print(f"  - {r}")
        print("")

    infos['remarks'] = remarks

    filename = gen_dir / 'discovery.json'
    res_abb.dump_json(filename)
    print(f"generalization result written to: {filename}")

    with open(gen_dir / 'infos.json', 'w') as f:
        json.dump(infos, f, indent=2)

    if trace is not None:
        filename = gen_dir / 'witness.json'
        trace.dump_json(filename)
        print(f"witness trace written to: {filename}")

    sys.exit(0)


if __name__ == "__main__":
    main()
